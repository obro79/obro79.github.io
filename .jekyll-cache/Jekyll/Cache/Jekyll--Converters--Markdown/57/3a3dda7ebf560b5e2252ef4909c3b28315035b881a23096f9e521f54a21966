I"dV<hr />
<p>layout: default
title: Projects
—
<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.0/es5/tex-mml-chtml.js">
</script></p>

<hr />

<h1 id="portfolio-optimization-project">Portfolio Optimization Project</h1>

<p>In this project, I applied several advanced mathematical models to construct and optimize a portfolio, including <strong>Classic Portfolio Optimization</strong>, the <strong>Black-Litterman Model</strong>, and several <strong>Objective Functions</strong> and <strong>Risk Measures</strong>. Below is an explanation of the mathematical theory behind each component.</p>

<h2 id="classic-portfolio-optimization-mean-variance-optimization">Classic Portfolio Optimization (Mean-Variance Optimization)</h2>

<p><strong>Mean-Variance Optimization</strong> (MVO), introduced by Harry Markowitz, focuses on optimizing a portfolio’s expected return and risk (variance). The objective is to find a set of asset weights that either maximize return for a given level of risk or minimize risk for a given expected return.</p>

<h3 id="1-expected-return">1. <strong>Expected Return:</strong></h3>
<p>The <strong>expected return</strong> of a portfolio is a weighted average of the expected returns of the individual assets:</p>

\[\mu_p = \sum_{i=1}^{N} w_i r_i = \mathbf{w}^T \mathbf{r}\]

<p>Where:</p>
<ul>
  <li>$( \mu_p )$ is the expected return of the portfolio.</li>
  <li>$( w_i )$ is the weight of asset ( i ) in the portfolio.</li>
  <li>$( r_i )$ is the expected return of asset ( i ).</li>
  <li>$( \mathbf{w} )$ is the vector of asset weights.</li>
  <li>( \mathbf{r} ) is the vector of expected returns.</li>
</ul>

<h3 id="2-portfolio-variance-risk">2. <strong>Portfolio Variance (Risk):</strong></h3>
<p>The <strong>variance</strong> of a portfolio measures the portfolio’s risk, accounting for how the returns of the assets move together (covariance):</p>

\[\sigma_p^2 = \mathbf{w}^T \Sigma \mathbf{w}\]

<p>Where:</p>
<ul>
  <li>( \sigma_p^2 ) is the portfolio variance.</li>
  <li>( \Sigma ) is the covariance matrix of asset returns.</li>
</ul>

<h3 id="3-optimization-problem">3. <strong>Optimization Problem:</strong></h3>
<p>The optimization can be set up as:</p>

<ul>
  <li><strong>Minimizing Risk:</strong></li>
</ul>

\[\min_{\mathbf{w}} \ \mathbf{w}^T \Sigma \mathbf{w}\]

<p>Subject to:</p>

\[\mathbf{w}^T \mathbf{r} = \mu_p, \quad \sum_{i=1}^{N} w_i = 1, \quad w_i \geq 0 \ (\text{for long-only portfolios})\]

<p>In this equation:</p>
<ul>
  <li>The goal is to minimize portfolio variance while achieving a certain expected return ( \mu_p ).</li>
  <li>The sum of weights equals 1 to ensure full investment.</li>
  <li>The weights ( w_i \geq 0 ) for long-only portfolios (no short selling).</li>
</ul>

<h2 id="black-litterman-model">Black-Litterman Model</h2>

<p>The <strong>Black-Litterman Model</strong> adjusts the traditional Markowitz optimization by blending market equilibrium returns with investor views. This model allows for incorporating subjective insights into the optimization process, mitigating the sensitivity of inputs in the classic approach.</p>

<h3 id="1-market-equilibrium-returns">1. <strong>Market Equilibrium Returns:</strong></h3>
<p>In equilibrium, the implied returns ( \Pi ) are reverse-engineered from the market weights ( w_m ) using the following equation:</p>

\[\Pi = \delta \Sigma w_m\]

<p>Where:</p>
<ul>
  <li>( \delta ) is the risk-aversion coefficient.</li>
  <li>( \Sigma ) is the covariance matrix of returns.</li>
  <li>( w_m ) are the market capitalization weights.</li>
</ul>

<h3 id="2-investor-views">2. <strong>Investor Views:</strong></h3>
<p>The investor has views on certain assets, which are represented by the matrix ( P ) (linking assets to views) and the expected return vector ( Q ). The uncertainty in the investor’s views is captured by the matrix ( \Omega ).</p>

<h3 id="3-blended-expected-returns">3. <strong>Blended Expected Returns:</strong></h3>
<p>The expected returns ( \Pi_{\text{BL}} ) under the Black-Litterman model are a weighted combination of the market equilibrium returns and the investor views:</p>

\[\Pi_{\text{BL}} = \left[ (\tau \Sigma)^{-1} + P^T \Omega^{-1} P \right]^{-1} \left[ (\tau \Sigma)^{-1} \Pi + P^T \Omega^{-1} Q \right]\]

<p>Where:</p>
<ul>
  <li>( \tau ) is a scalar reflecting the uncertainty of the equilibrium returns.</li>
  <li>( P ) is the matrix defining investor views.</li>
  <li>( Q ) is the vector of expected returns for the views.</li>
  <li>( \Omega ) is the covariance matrix of the views.</li>
</ul>

<h2 id="objective-functions">Objective Functions</h2>

<p>Objective functions define what we aim to optimize in the portfolio. I used the following:</p>

<h3 id="1-maximizing-the-sharpe-ratio">1. <strong>Maximizing the Sharpe Ratio:</strong></h3>
<p>The <strong>Sharpe Ratio</strong> is a measure of risk-adjusted return. We maximize it to get the highest possible return for each unit of risk:</p>

\[\text{Sharpe Ratio} = \frac{R_p - R_f}{\sigma_p}\]

<p>Where:</p>
<ul>
  <li>( R_p ) is the expected portfolio return.</li>
  <li>( R_f ) is the risk-free rate.</li>
  <li>( \sigma_p ) is the standard deviation of portfolio returns (portfolio risk).</li>
</ul>

<p>The optimization problem becomes:</p>

\[\max_{\mathbf{w}} \ \frac{\mathbf{w}^T \mathbf{r} - R_f}{\sqrt{\mathbf{w}^T \Sigma \mathbf{w}}}\]

<h3 id="2-minimizing-risk-variance">2. <strong>Minimizing Risk (Variance):</strong></h3>
<p>In this case, the goal is to minimize the portfolio’s risk for a given return:</p>

\[\min_{\mathbf{w}} \ \mathbf{w}^T \Sigma \mathbf{w}\]

<p>This leads to a low-risk portfolio but doesn’t necessarily maximize returns.</p>

<h3 id="3-maximizing-return">3. <strong>Maximizing Return:</strong></h3>
<p>This objective maximizes the portfolio’s expected return:</p>

\[\max_{\mathbf{w}} \ \mathbf{w}^T \mathbf{r}\]

<p>This aims to maximize profit, but the risk level may be high.</p>

<h2 id="risk-measures">Risk Measures</h2>

<p>To assess and manage risk, I used the following measures:</p>

<h3 id="1-value-at-risk-var">1. <strong>Value-at-Risk (VaR):</strong></h3>
<p><strong>Value-at-Risk (VaR)</strong> estimates the maximum loss over a specified period for a given confidence level ( \alpha ):</p>

\[\text{VaR}_{\alpha} = \inf \{ x \in \mathbb{R} : P(L &gt; x) \leq 1 - \alpha \}\]

<p>Where ( L ) is the loss over the specified time period. For example, a 95% VaR might indicate the portfolio will lose no more than $1,000 with 95% confidence.</p>

<h3 id="2-conditional-value-at-risk-cvar">2. <strong>Conditional Value-at-Risk (CVaR):</strong></h3>
<p><strong>CVaR</strong> (also called Expected Shortfall) is the average loss that exceeds the VaR. It is used to capture the risk of extreme losses:</p>

\[\text{CVaR}_{\alpha} = \mathbb{E}[L \ | \ L &gt; \text{VaR}_{\alpha}]\]

<p>This is a more conservative risk measure, focusing on tail risk.</p>

<h3 id="3-maximum-drawdown-mdd">3. <strong>Maximum Drawdown (MDD):</strong></h3>
<p><strong>Maximum Drawdown</strong> measures the maximum observed loss from the peak to the trough of the portfolio’s value during a given period:</p>

\[\text{MDD} = \max_{t \in [0,T]} \left( \frac{\text{peak}_t - \text{trough}_t}{\text{peak}_t} \right)\]

<p>This gives an idea of the worst-case scenario for potential losses.</p>

<hr />

<p>By using these mathematical models, it enables users to construct portfolios that balance risk and return effectively. The combination of <strong>Classic Portfolio Optimization</strong>, the <strong>Black-Litterman Model</strong>, and these <strong>Objective Functions</strong> and <strong>Risk Measures</strong> allows for a highly customizable and sophisticated approach to portfolio management.</p>

<hr />
<p>layout: default
title: Options Pricing and Monte Carlo Methods Project
—</p>

<h1 id="options-pricing-and-monte-carlo-methods-project">Options Pricing and Monte Carlo Methods Project</h1>

<p>In this project, I explored the pricing of <strong>European</strong> and <strong>American options</strong>, examined the <strong>Greeks</strong> (sensitivities of option prices to various factors), and employed <strong>Monte Carlo Methods</strong> for asset pricing. Below is an in-depth explanation of these concepts along with the associated mathematical models.</p>

<h2 id="european-options">European Options</h2>

<p>A <strong>European option</strong> is a financial derivative that gives the holder the right (but not the obligation) to buy or sell an asset at a specific price (the strike price) on a specific date (the expiration date).</p>

<h3 id="1-call-option-pricing-formula">1. <strong>Call Option Pricing Formula:</strong></h3>
<p>The price of a European call option can be determined using the <strong>Black-Scholes Formula</strong>:</p>

\[C = S_0 N(d_1) - K e^{-rT} N(d_2)\]

<p>Where:</p>
<ul>
  <li>( C ) is the price of the call option.</li>
  <li>( S_0 ) is the current price of the underlying asset.</li>
  <li>( K ) is the strike price.</li>
  <li>( r ) is the risk-free interest rate.</li>
  <li>( T ) is the time to maturity.</li>
  <li>( N(\cdot) ) is the cumulative distribution function of the standard normal distribution.</li>
  <li>( d_1 ) and ( d_2 ) are calculated as:</li>
</ul>

\[d_1 = \frac{\ln\left(\frac{S_0}{K}\right) + \left(r + \frac{\sigma^2}{2}\right)T}{\sigma \sqrt{T}}\]

\[d_2 = d_1 - \sigma \sqrt{T}\]

<p>Where ( \sigma ) is the volatility of the underlying asset.</p>

<h3 id="2-put-option-pricing-formula">2. <strong>Put Option Pricing Formula:</strong></h3>
<p>The price of a European put option can be derived from the put-call parity or directly from the Black-Scholes equation:</p>

\[P = K e^{-rT} N(-d_2) - S_0 N(-d_1)\]

<p>Where:</p>
<ul>
  <li>( P ) is the price of the put option.</li>
  <li>The other terms are defined similarly to the call option formula.</li>
</ul>

<h2 id="american-options">American Options</h2>

<p>An <strong>American option</strong> differs from a European option in that it can be exercised at any point up to the expiration date. This flexibility makes pricing American options more complex.</p>

<h3 id="1-pricing-american-options">1. <strong>Pricing American Options:</strong></h3>
<p>American options cannot be priced exactly with the Black-Scholes formula due to their early exercise feature. Instead, they are typically priced using numerical methods like the <strong>Binomial Tree Method</strong> or <strong>Monte Carlo simulations</strong> (for approximations).</p>

<h4 id="binomial-tree-model"><strong>Binomial Tree Model:</strong></h4>
<p>The Binomial Tree Model breaks the time to expiration into small steps and calculates the price at each node, working backwards from the expiration date.</p>

<p>At each node:</p>
<ul>
  <li>The asset price can either move up or down by specific factors ( u ) and ( d ).</li>
  <li>At the terminal nodes (expiration), the payoff is calculated, and the option price is determined by discounting backwards through the tree, considering the possibility of early exercise.</li>
</ul>

<h3 id="2-binomial-tree-equations">2. <strong>Binomial Tree Equations:</strong></h3>
<p>The price of an American call or put option at each node is:</p>

\[C = \max(S_t - K, e^{-r\Delta t} [pC_u + (1 - p)C_d])\]

<p>Where:</p>
<ul>
  <li>( C ) is the option price.</li>
  <li>( S_t ) is the asset price at time ( t ).</li>
  <li>( K ) is the strike price.</li>
  <li>( C_u ) and ( C_d ) are the option prices at the up and down nodes, respectively.</li>
  <li>( p ) is the probability of an upward movement, calculated as:</li>
</ul>

\[p = \frac{e^{r\Delta t} - d}{u - d}\]

<ul>
  <li>( \Delta t ) is the length of each time step.</li>
</ul>

<h2 id="the-greeks">The Greeks</h2>

<p>The <strong>Greeks</strong> measure the sensitivity of the option price to various factors like the underlying asset price, time, and volatility. These are key risk management tools in options trading.</p>

<h3 id="1-delta--delta-">1. <strong>Delta (( \Delta )):</strong></h3>
<p>Delta measures the sensitivity of the option price to changes in the underlying asset price:</p>

\[\Delta = \frac{\partial C}{\partial S}\]

<p>For a call option:</p>

\[\Delta_{\text{call}} = N(d_1)\]

<p>For a put option:</p>

\[\Delta_{\text{put}} = N(d_1) - 1\]

<h3 id="2-gamma--gamma-">2. <strong>Gamma (( \Gamma )):</strong></h3>
<p>Gamma measures the rate of change of Delta with respect to changes in the underlying asset price:</p>

\[\Gamma = \frac{\partial^2 C}{\partial S^2}\]

<p>For both calls and puts:</p>

\[\Gamma = \frac{N'(d_1)}{S_0 \sigma \sqrt{T}}\]

<h3 id="3-vega--nu-">3. <strong>Vega (( \nu )):</strong></h3>
<p>Vega measures the sensitivity of the option price to changes in the volatility of the underlying asset:</p>

\[\nu = \frac{\partial C}{\partial \sigma} = S_0 \sqrt{T} N'(d_1)\]

<h3 id="4-theta--theta-">4. <strong>Theta (( \Theta )):</strong></h3>
<p>Theta measures the sensitivity of the option price to the passage of time (time decay):</p>

<p>For a call option:</p>

\[\Theta_{\text{call}} = -\frac{S_0 N'(d_1) \sigma}{2 \sqrt{T}} - rK e^{-rT} N(d_2)\]

<p>For a put option:</p>

\[\Theta_{\text{put}} = -\frac{S_0 N'(d_1) \sigma}{2 \sqrt{T}} + rK e^{-rT} N(-d_2)\]

<h3 id="5-rho--rho-">5. <strong>Rho (( \rho )):</strong></h3>
<p>Rho measures the sensitivity of the option price to changes in the risk-free interest rate:</p>

<p>For a call option:</p>

\[\rho_{\text{call}} = K T e^{-rT} N(d_2)\]

<p>For a put option:</p>

\[\rho_{\text{put}} = -K T e^{-rT} N(-d_2)\]

<h2 id="monte-carlo-methods-for-asset-pricing">Monte Carlo Methods for Asset Pricing</h2>

<p><strong>Monte Carlo Methods</strong> are used for pricing derivatives, particularly when closed-form solutions (like the Black-Scholes formula) are not available. Monte Carlo simulations rely on the generation of random paths for the underlying asset price to estimate the option price.</p>

<h3 id="1-monte-carlo-simulation-for-european-options">1. <strong>Monte Carlo Simulation for European Options:</strong></h3>
<p>The general approach to pricing European options using Monte Carlo simulations involves simulating a large number of possible future asset price paths and then calculating the option payoff for each path.</p>

<h4 id="step-1-simulating-asset-prices"><strong>Step 1: Simulating Asset Prices</strong></h4>
<p>The underlying asset prices are modeled using a <strong>Geometric Brownian Motion</strong> (GBM):</p>

\[S_T = S_0 \exp\left[\left(r - \frac{\sigma^2}{2}\right)T + \sigma \sqrt{T} Z\right]\]

<p>Where:</p>
<ul>
  <li>( S_T ) is the simulated price at time ( T ).</li>
  <li>( S_0 ) is the current asset price.</li>
  <li>( r ) is the risk-free rate.</li>
  <li>( \sigma ) is the volatility.</li>
  <li>( Z ) is a standard normal random variable.</li>
</ul>

<h4 id="step-2-calculating-the-payoff"><strong>Step 2: Calculating the Payoff</strong></h4>
<p>For a call option, the payoff is:</p>

\[\text{Payoff} = \max(S_T - K, 0)\]

<p>For a put option, the payoff is:</p>

\[\text{Payoff} = \max(K - S_T, 0)\]

<h4 id="step-3-estimating-the-option-price"><strong>Step 3: Estimating the Option Price</strong></h4>
<p>The option price is estimated as the discounted average of the payoffs:</p>

\[\text{Option Price} = e^{-rT} \frac{1}{M} \sum_{i=1}^{M} \text{Payoff}_i\]

<p>Where ( M ) is the number of simulated paths.</p>

<hr />
<p>layout: default
title: Monte Carlo Methods for Option Pricing
—</p>

<h1 id="monte-carlo-methods-for-option-pricing">Monte Carlo Methods for Option Pricing</h1>

<p>Monte Carlo simulation is a powerful technique used to price options by simulating numerous potential future price paths of the underlying asset. This method is particularly useful when there are no closed-form solutions for the option, such as in the case of <strong>American options</strong> or <strong>complex exotic derivatives</strong>.</p>

<h2 id="1-general-approach-to-monte-carlo-simulation">1. General Approach to Monte Carlo Simulation</h2>

<p>The basic idea behind Monte Carlo simulations is to generate multiple random paths for the price of the underlying asset and then calculate the expected payoff of the option across these paths. The option price is then estimated as the discounted average of these payoffs.</p>

<h3 id="geometric-brownian-motion-gbm">Geometric Brownian Motion (GBM)</h3>

<p>In Monte Carlo simulations, the underlying asset price is usually modeled as following <strong>Geometric Brownian Motion (GBM)</strong>. This model assumes that the price of the asset evolves over time with a drift (representing the expected return) and a volatility component (representing randomness in the price movements).</p>

<p>The stochastic differential equation for GBM is:</p>

\[dS_t = \mu S_t dt + \sigma S_t dW_t\]

<p>Where:</p>
<ul>
  <li>( S_t ) is the asset price at time ( t ).</li>
  <li>( \mu ) is the drift (or expected rate of return).</li>
  <li>( \sigma ) is the volatility of the asset.</li>
  <li>( dW_t ) is a Wiener process (standard Brownian motion), representing the random component.</li>
</ul>

<h3 id="simulating-asset-prices-using-gbm">Simulating Asset Prices Using GBM</h3>

<p>To simulate the price of an asset over time, we discretize the time period into small steps and use the following equation to generate asset prices at each step:</p>

\[S_{t + \Delta t} = S_t \exp\left[\left( \mu - \frac{\sigma^2}{2} \right) \Delta t + \sigma \sqrt{\Delta t} Z_t\right]\]

<p>Where:</p>
<ul>
  <li>( S_{t + \Delta t} ) is the asset price at the next time step.</li>
  <li>( S_t ) is the current asset price.</li>
  <li>( \Delta t ) is the time increment.</li>
  <li>( Z_t ) is a standard normal random variable ( Z \sim N(0,1) ).</li>
</ul>

<p>This equation is used to simulate price paths of the underlying asset over time. By repeating this simulation for many paths, we can estimate the expected payoff of the option.</p>

<h2 id="2-monte-carlo-simulation-for-european-options">2. Monte Carlo Simulation for European Options</h2>

<p>European options can only be exercised at the expiration date. Therefore, for European options, we simulate the underlying asset price at the expiration date ( T ) and calculate the payoff at that point.</p>

<h3 id="simulating-payoffs">Simulating Payoffs</h3>

<p>For a <strong>European call option</strong>, the payoff at expiration is:</p>

\[\text{Payoff}_{\text{call}} = \max(S_T - K, 0)\]

<p>For a <strong>European put option</strong>, the payoff at expiration is:</p>

\[\text{Payoff}_{\text{put}} = \max(K - S_T, 0)\]

<p>Where:</p>
<ul>
  <li>( S_T ) is the simulated price of the underlying asset at expiration ( T ).</li>
  <li>( K ) is the strike price of the option.</li>
</ul>

<h3 id="estimating-the-option-price">Estimating the Option Price</h3>

<p>The Monte Carlo estimate of the option price is the discounted average of the payoffs from all simulated paths. For ( M ) simulated paths, the price of the European option is given by:</p>

\[\text{Option Price} = e^{-rT} \frac{1}{M} \sum_{i=1}^{M} \text{Payoff}_i\]

<p>Where:</p>
<ul>
  <li>( r ) is the risk-free interest rate.</li>
  <li>( T ) is the time to maturity.</li>
  <li>( \text{Payoff}_i ) is the payoff for the ( i )-th simulated path.</li>
  <li>( M ) is the total number of simulated paths.</li>
</ul>

<h2 id="3-monte-carlo-simulation-for-american-options">3. Monte Carlo Simulation for American Options</h2>

<p>American options are more complex because they can be exercised at any time up until expiration. This means we need to account for the possibility of early exercise when pricing these options.</p>

<h3 id="least-squares-monte-carlo-lsmc-method">Least-Squares Monte Carlo (LSMC) Method</h3>

<p>One method to price American options using Monte Carlo is the <strong>Least-Squares Monte Carlo (LSMC)</strong> approach. This method approximates the value of the option at each time step by considering whether the option holder would exercise the option early.</p>

<p>The general steps are:</p>
<ol>
  <li>Simulate multiple price paths for the underlying asset using GBM.</li>
  <li>At each time step, determine the payoff from exercising the option early.</li>
  <li>Use regression to estimate the continuation value (i.e., the value of holding the option) as a function of the asset price.</li>
  <li>If the immediate exercise payoff is greater than the estimated continuation value, the option is exercised; otherwise, it is continued to the next step.</li>
</ol>

<h3 id="american-option-payoff">American Option Payoff</h3>

<p>At each time step ( t ), the payoff for an American call option is:</p>

\[\text{Payoff}_{\text{call}} = \max(S_t - K, 0)\]

<p>For an American put option, the payoff is:</p>

\[\text{Payoff}_{\text{put}} = \max(K - S_t, 0)\]

<p>By simulating multiple paths and using the LSMC approach, we can estimate the value of the American option by comparing the continuation value to the exercise payoff at each step.</p>

<h2 id="4-accuracy-and-convergence-of-monte-carlo-methods">4. Accuracy and Convergence of Monte Carlo Methods</h2>

<p>The accuracy of Monte Carlo simulations depends on the number of simulated paths ( M ). As the number of simulations increases, the accuracy of the option price estimate improves.</p>

<p>The error in Monte Carlo simulations typically decreases at the rate of:</p>

\[\text{Error} \propto \frac{1}{\sqrt{M}}\]

<p>This means that to reduce the error by half, we need to quadruple the number of simulations.</p>

<hr />

<p>In this project, I used Monte Carlo methods to simulate both <strong>European</strong> and <strong>American options</strong>. For European options, I applied the Black-Scholes model for validation and compared it with the Monte Carlo results. For American options, I implemented the <strong>Least-Squares Monte Carlo</strong> method to handle the possibility of early exercise. These methods allowed for flexible and accurate pricing of options in complex scenarios where analytical solutions are not feasible.</p>

:ET